#pragma config(Hubs, S1, HTMotor, HTMotor, none, none)
#pragma config(Sensor, S1, , sensorI2CMuxController)
#pragma config(Sensor, S2, touch, sensorTouch)
#pragma config(Sensor, S3, light, sensorLightActive)
#pragma config(Sensor, S4, sonar, sensorSONAR)
#pragma config(Motor, mtr_S1_C1_1, motorD, tmotorTetrix, openLoop, encoder)
#pragma config(Motor, mtr_S1_C1_2, motorE, tmotorTetrix, openLoop, reversed, encoder)
#pragma config(Motor, mtr_S1_C2_1, , tmotorTetrix, openLoop)
#pragma config(Motor, mtr_S1_C2_2, , tmotorTetrix, openLoop)
#include "JoystickDriver.c"
task main()
{
   if(SensorValue(sensorIfrared) < 5) //this is to account for the fact that the IR beacon could be on either of the two sides of the rack
   	{
   	while(SensorValue(sensorInfrared) != 2)
   		{
   		motor[motorD] = 100;
   		motor[motorE] = -100;
   		}
   	}
   else
   	{
   	while(SensorValue(sensorInfrared) != 8)
   		{
   		motor[motorD] = 100;
   		motor[motorE] = -100;
   		}
   	}
   
   motor[motorD] = 100;
   motor[motorE] = -100;
   wait1Msec(20);
   
   if(SensorValue(sensorInfrared) < 5)
   	{
   	while(SensorValue(sensorInfrared) != 4) // this is so that we can make sure it doesn't hit the rack.  We can change it to 5 if it isn't a problem.
   		{
   		motor[motorD] = 50; //make sure this turns the robot to the left
   		}
   	while(SensorValue(sensorInfrared) != 2)
   		{
   		motor[motorD] = 100;
   		motor[motorE] = -100;
   		}
   	}
   else
   	{
   	while(SensorValue(sensorInfrared) != 6)
   		{
   		motor[motorE] = -50; //adjust so that it turns right
   		}
   	while(SensorValue(sensorInfrared) != 8)
   		{
   		motor[motorD] = 100;
   		motor[motorE] = -100;
   		}
   	}
   	
   if(SensorValue(sensorInfrared) < 5)
   	{
   	while(SensorValue(sensorInfrared) != 5)
   		{
   		motor[motorD] = 50;
   		}
   	}
   else
   	{
   	while(SensorValue(sensorInfrared) != 5)
   		{
   		motor[motorE] = -50;
   		}
   	}
   
   while(SensorValue(sensorSonar) > 10) //we'll need to play around with the value a bit
   	{
   	motor[motorD] = 50;
   	motor[motorE] = -50;
   	}
   	
   motor[motorF] = 50;
   motor[motorG] = 50;//These should be replaced with the motors that govern the conveyor thing and the signs should be adjusted accordingly so as to make them put the cube into the container
   wait1Msec(3000);
   
   nMotorEncoder[motorD] = 0;
   nMotorEncoderTarget[motorD] = 90;
   motor[motorD] = 75;
   
   while(nMotorRunState[motorD] = runStateIdle)
   {
   
   }
   
   
   
